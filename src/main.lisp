(in-package :dezero)

(let* ((x (make-instance 'dz-variable :data (numcl:asarray 10)))
       (f (make-instance 'dz-square))
       (y (call f x)))
  (slot-value y 'data))

(let* ((af (make-instance 'dz-square))
       (bf (make-instance 'dz-exp))
       (cf (make-instance 'dz-square))
       (x (make-instance 'dz-variable :data (asarray '(0.5))))
       (a (call af x))
       (b (call bf a))
       (y (call cf b))
       )
  (slot-value y 'data))

(let* ((f (make-instance 'dz-square))
       (x (make-instance 'dz-variable :data (asarray '(2.0))))
       (dy (numerical-diff f x)))
  dy)

(let ((f (let ((af (make-instance 'dz-square))
	       (bf (make-instance 'dz-exp))
	       (cf (make-instance 'dz-square)))
	   (compose-two cf (compose-two bf af)))))
  (let* ((x (make-instance 'dz-variable :data (asarray '(0.5))))
	 (dy (numerical-diff f x)))
    dy))

(let* ((af (make-instance 'dz-square))
       (bf (make-instance 'dz-exp))
       (cf (make-instance 'dz-square))
       (x (make-instance 'dz-variable :data (asarray '(0.5))))
       (a (call af x))
       (b (call bf a))
       (y (call cf b)))
  (setf (slot-value y 'grad) (asarray '(1.0)))
  (backward y)
  (slot-value x 'grad))
